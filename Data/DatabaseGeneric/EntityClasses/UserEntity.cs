//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.5.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using Demo.HelperClasses;
using Demo.FactoryClasses;
using Demo.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Demo.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'User'.<br/><br/></summary>
	[Serializable]
	public partial class UserEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private EntityCollection<UserEntity> _users;
		private EntityCollection<UserEntity> _users1;
		private EntityCollection<UserRoleEntity> _userRoles;
		private UserEntity _user;
		private UserEntity _user1;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static UserEntityStaticMetaData _staticMetaData = new UserEntityStaticMetaData();
		private static UserRelations _relationsFactory = new UserRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name User</summary>
			public static readonly string User = "User";
			/// <summary>Member name User1</summary>
			public static readonly string User1 = "User1";
			/// <summary>Member name Users</summary>
			public static readonly string Users = "Users";
			/// <summary>Member name Users1</summary>
			public static readonly string Users1 = "Users1";
			/// <summary>Member name UserRoles</summary>
			public static readonly string UserRoles = "UserRoles";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class UserEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public UserEntityStaticMetaData()
			{
				SetEntityCoreInfo("UserEntity", InheritanceHierarchyType.None, false, (int)Demo.EntityType.UserEntity, typeof(UserEntity), typeof(UserEntityFactory), false);
				AddNavigatorMetaData<UserEntity, EntityCollection<UserEntity>>("Users", a => a._users, (a, b) => a._users = b, a => a.Users, () => new UserRelations().UserEntityUsingCreatedByUserId, typeof(UserEntity), (int)Demo.EntityType.UserEntity);
				AddNavigatorMetaData<UserEntity, EntityCollection<UserEntity>>("Users1", a => a._users1, (a, b) => a._users1 = b, a => a.Users1, () => new UserRelations().UserEntityUsingLastModifiedByUserId, typeof(UserEntity), (int)Demo.EntityType.UserEntity);
				AddNavigatorMetaData<UserEntity, EntityCollection<UserRoleEntity>>("UserRoles", a => a._userRoles, (a, b) => a._userRoles = b, a => a.UserRoles, () => new UserRelations().UserRoleEntityUsingUserId, typeof(UserRoleEntity), (int)Demo.EntityType.UserRoleEntity);
				AddNavigatorMetaData<UserEntity, UserEntity>("User", "Users", (a, b) => a._user = b, a => a._user, (a, b) => a.User = b, Demo.RelationClasses.StaticUserRelations.UserEntityUsingIdCreatedByUserIdStatic, ()=>new UserRelations().UserEntityUsingIdCreatedByUserId, null, new int[] { (int)UserFieldIndex.CreatedByUserId }, null, true, (int)Demo.EntityType.UserEntity);
				AddNavigatorMetaData<UserEntity, UserEntity>("User1", "Users1", (a, b) => a._user1 = b, a => a._user1, (a, b) => a.User1 = b, Demo.RelationClasses.StaticUserRelations.UserEntityUsingIdLastModifiedByUserIdStatic, ()=>new UserRelations().UserEntityUsingIdLastModifiedByUserId, null, new int[] { (int)UserFieldIndex.LastModifiedByUserId }, null, true, (int)Demo.EntityType.UserEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static UserEntity()
		{
		}

		/// <summary> CTor</summary>
		public UserEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public UserEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this UserEntity</param>
		public UserEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for User which data should be fetched into this User object</param>
		public UserEntity(System.Int32 id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for User which data should be fetched into this User object</param>
		/// <param name="validator">The custom validator object for this UserEntity</param>
		public UserEntity(System.Int32 id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected UserEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'User' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoUsers() { return CreateRelationInfoForNavigator("Users"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'User' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoUsers1() { return CreateRelationInfoForNavigator("Users1"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'UserRole' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoUserRoles() { return CreateRelationInfoForNavigator("UserRoles"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'User' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoUser() { return CreateRelationInfoForNavigator("User"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'User' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoUser1() { return CreateRelationInfoForNavigator("User1"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this UserEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static UserRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'User' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathUsers { get { return _staticMetaData.GetPrefetchPathElement("Users", CommonEntityBase.CreateEntityCollection<UserEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'User' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathUsers1 { get { return _staticMetaData.GetPrefetchPathElement("Users1", CommonEntityBase.CreateEntityCollection<UserEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'UserRole' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathUserRoles { get { return _staticMetaData.GetPrefetchPathElement("UserRoles", CommonEntityBase.CreateEntityCollection<UserRoleEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'User' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathUser { get { return _staticMetaData.GetPrefetchPathElement("User", CommonEntityBase.CreateEntityCollection<UserEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'User' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathUser1 { get { return _staticMetaData.GetPrefetchPathElement("User1", CommonEntityBase.CreateEntityCollection<UserEntity>()); } }

		/// <summary>The CreatedByUserId property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."CreatedByUserId".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> CreatedByUserId
		{
			get { return (Nullable<System.Int32>)GetValue((int)UserFieldIndex.CreatedByUserId, false); }
			set	{ SetValue((int)UserFieldIndex.CreatedByUserId, value); }
		}

		/// <summary>The DateCreated property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."DateCreated".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime DateCreated
		{
			get { return (System.DateTime)GetValue((int)UserFieldIndex.DateCreated, true); }
			set	{ SetValue((int)UserFieldIndex.DateCreated, value); }
		}

		/// <summary>The Email property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."Email".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 250.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Email
		{
			get { return (System.String)GetValue((int)UserFieldIndex.Email, true); }
			set	{ SetValue((int)UserFieldIndex.Email, value); }
		}

		/// <summary>The Id property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."Id".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 Id
		{
			get { return (System.Int32)GetValue((int)UserFieldIndex.Id, true); }
			set { SetValue((int)UserFieldIndex.Id, value); }		}

		/// <summary>The IsActive property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."IsActive".<br/>Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean IsActive
		{
			get { return (System.Boolean)GetValue((int)UserFieldIndex.IsActive, true); }
			set	{ SetValue((int)UserFieldIndex.IsActive, value); }
		}

		/// <summary>The LastModified property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."LastModified".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime LastModified
		{
			get { return (System.DateTime)GetValue((int)UserFieldIndex.LastModified, true); }
			set	{ SetValue((int)UserFieldIndex.LastModified, value); }
		}

		/// <summary>The LastModifiedByUserId property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."LastModifiedByUserId".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> LastModifiedByUserId
		{
			get { return (Nullable<System.Int32>)GetValue((int)UserFieldIndex.LastModifiedByUserId, false); }
			set	{ SetValue((int)UserFieldIndex.LastModifiedByUserId, value); }
		}

		/// <summary>The Name property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."Name".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 250.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Name
		{
			get { return (System.String)GetValue((int)UserFieldIndex.Name, true); }
			set	{ SetValue((int)UserFieldIndex.Name, value); }
		}

		/// <summary>The NationalId property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."NationalId".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 14.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String NationalId
		{
			get { return (System.String)GetValue((int)UserFieldIndex.NationalId, true); }
			set	{ SetValue((int)UserFieldIndex.NationalId, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'UserEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(UserEntity))]
		public virtual EntityCollection<UserEntity> Users { get { return GetOrCreateEntityCollection<UserEntity, UserEntityFactory>("User", true, false, ref _users); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'UserEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(UserEntity))]
		public virtual EntityCollection<UserEntity> Users1 { get { return GetOrCreateEntityCollection<UserEntity, UserEntityFactory>("User1", true, false, ref _users1); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'UserRoleEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(UserRoleEntity))]
		public virtual EntityCollection<UserRoleEntity> UserRoles { get { return GetOrCreateEntityCollection<UserRoleEntity, UserRoleEntityFactory>("User", true, false, ref _userRoles); } }

		/// <summary>Gets / sets related entity of type 'UserEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual UserEntity User
		{
			get { return _user; }
			set { SetSingleRelatedEntityNavigator(value, "User"); }
		}

		/// <summary>Gets / sets related entity of type 'UserEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual UserEntity User1
		{
			get { return _user1; }
			set { SetSingleRelatedEntityNavigator(value, "User1"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace Demo
{
	public enum UserFieldIndex
	{
		///<summary>CreatedByUserId. </summary>
		CreatedByUserId,
		///<summary>DateCreated. </summary>
		DateCreated,
		///<summary>Email. </summary>
		Email,
		///<summary>Id. </summary>
		Id,
		///<summary>IsActive. </summary>
		IsActive,
		///<summary>LastModified. </summary>
		LastModified,
		///<summary>LastModifiedByUserId. </summary>
		LastModifiedByUserId,
		///<summary>Name. </summary>
		Name,
		///<summary>NationalId. </summary>
		NationalId,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace Demo.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: User. </summary>
	public partial class UserRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between UserEntity and UserEntity over the 1:n relation they have, using the relation between the fields: User.Id - User.CreatedByUserId</summary>
		public virtual IEntityRelation UserEntityUsingCreatedByUserId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Users", true, new[] { UserFields.Id, UserFields.CreatedByUserId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UserEntity and UserEntity over the 1:n relation they have, using the relation between the fields: User.Id - User.LastModifiedByUserId</summary>
		public virtual IEntityRelation UserEntityUsingLastModifiedByUserId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Users1", true, new[] { UserFields.Id, UserFields.LastModifiedByUserId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UserEntity and UserRoleEntity over the 1:n relation they have, using the relation between the fields: User.Id - UserRole.UserId</summary>
		public virtual IEntityRelation UserRoleEntityUsingUserId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "UserRoles", true, new[] { UserFields.Id, UserRoleFields.UserId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UserEntity and UserEntity over the m:1 relation they have, using the relation between the fields: User.CreatedByUserId - User.Id</summary>
		public virtual IEntityRelation UserEntityUsingIdCreatedByUserId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "User", false, new[] { UserFields.Id, UserFields.CreatedByUserId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UserEntity and UserEntity over the m:1 relation they have, using the relation between the fields: User.LastModifiedByUserId - User.Id</summary>
		public virtual IEntityRelation UserEntityUsingIdLastModifiedByUserId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "User1", false, new[] { UserFields.Id, UserFields.LastModifiedByUserId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticUserRelations
	{
		internal static readonly IEntityRelation UserEntityUsingCreatedByUserIdStatic = new UserRelations().UserEntityUsingCreatedByUserId;
		internal static readonly IEntityRelation UserEntityUsingLastModifiedByUserIdStatic = new UserRelations().UserEntityUsingLastModifiedByUserId;
		internal static readonly IEntityRelation UserRoleEntityUsingUserIdStatic = new UserRelations().UserRoleEntityUsingUserId;
		internal static readonly IEntityRelation UserEntityUsingIdCreatedByUserIdStatic = new UserRelations().UserEntityUsingIdCreatedByUserId;
		internal static readonly IEntityRelation UserEntityUsingIdLastModifiedByUserIdStatic = new UserRelations().UserEntityUsingIdLastModifiedByUserId;

		/// <summary>CTor</summary>
		static StaticUserRelations() { }
	}
}
